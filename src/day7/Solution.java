package day7;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Scanner;

public class Solution {
    static int[] sizes= { 0, 2, 2, 0, 1, 2, 2, 2, 2 };
    private static ArrayList<Integer> result;

    /**
     * Main method of class.
     */
    static Integer[] parseInput() {
        //retrieve and parse the input to array of strings
        Scanner scanner = new Scanner(Solution.class.getResourceAsStream("input7.txt"));
        String[] stringcode = scanner.nextLine().split(",");

        //parse into array of Integers
        Integer[] intcode = new Integer[stringcode.length];
        for (int i = 0; i < intcode.length; i++) {
            intcode[i] = Integer.parseInt(stringcode[i]);
        }
        //set the initial value and solve
        return intcode;
    }

    /**
     * Method to pass the return value
     * @return - the result generated by instruction 4
     */
    public static int getResult() {
        return result.get(0);
    }

    static LinkedList<LinkedList<Integer>> generateInputs(Integer[] inputArray) {
        LinkedList<LinkedList<Integer>> result = new LinkedList<>();
        LinkedList<Integer> numbers = new LinkedList<>(Arrays.asList(inputArray));
        for (Integer number : numbers) {
            LinkedList<Integer> current = new LinkedList<>();
            LinkedList<Integer> nums = (LinkedList<Integer>) numbers.clone();
            nums.remove(number);
            recursiveGenerator(nums, result, number, current);
        }
        return result;
    }

    private static void recursiveGenerator(LinkedList<Integer> numbers, LinkedList<LinkedList<Integer>> result,
                                           Integer number, LinkedList<Integer> current) {
        current.add(number);
        if (numbers.isEmpty()) {
            result.add(current);
        } else {
            for (Integer num : numbers) {
                LinkedList<Integer> nums = (LinkedList<Integer>) numbers.clone();
                nums.remove(num);
                LinkedList<Integer> next = (LinkedList<Integer>) current.clone();
                recursiveGenerator(nums, result, num, next);
            }
        }
    }
}
